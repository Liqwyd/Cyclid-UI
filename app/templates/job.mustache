<div class="container" id="job">

  <div class="alert alert-danger hidden" role="alert" id="job_failure"></div>

  <div class="panel hidden" id="job_details">
    <div class="container">

      <div class="row">
        <div class="col-md-12" id="job_header"></div>
      </div>

      <div class="row">
        <div class="col-md-4">
          <table class="table no-border text-muted">
            <tr><td>Job</td><td id="job_id"></td></tr>
            <tr><td>Started</td><td id="job_started"></td></tr>
            <tr><td>Ended</td><td id="job_ended"></td></tr>
          </table>
        </div>

        <!-- currently unused -->
        <div class="col-md-4">
          <table class="table no-border text-muted">
            <tr><td>Extra</td><td id="job_extra">Extra info</td></tr>
            <tr><td>Appears</td><td id="job_appears">Over here</td></tr>
          </table>
        </div>

        <!-- currently unused -->
        <div class="col-md-4">
          <table class="table no-border text-muted">
          </table>
        </div>

      </div>

      <div class="row">
        <div class="col-md-1">
          <h4 class="text-normal">Status</h4>
        </div>
        <div class="col-md-1">
          <span id="job_status"></span>
        </div>
        <div id="job-waiting" class="col-md-3 pad-3 text-muted hidden">
          <h6><i class="fa fa-cog fa-spin"></i>&nbsp;Waiting for job to finish...</h6>
        </div>
      </div>
    </div>
  </div>

  <div id="job_log_outer" class="hidden">
    <pre id="job_log_inner" class="pre-scrollable job-log"></pre>
  </div>

  <script type="text/javascript">
    // Perform an authenticated GET to the API server.
    function api_get(url, username, success, error) {
      $.ajax({
        url: url,
        dataType: 'json',
        crossDomain: true,
        beforeSend: function(xhr) {
          var token = Cookies.get('cyclid.token');
          var authorization = `Token ${username}:${token}`
          xhr.setRequestHeader('Authorization', authorization);
        },
        success: success,
        error: error
      });
    }

    // Convert a Cyclid job status code to a human readable status
    function job_status_to_human(status_id) {
      var statuses = {1: 'New',
                      2: 'Waiting',
                      3: 'Started',
                      4: 'Failing',
                      10: 'Succeeded',
                      11: 'Failed'};
      var status = statuses[status_id];

      var glyphs = {1: 'glyphicon-share-alt',
                    2: 'glyphicon-time',
                    3: 'glyphicon-refresh',
                    4: 'glyphicon-alert',
                    10: 'glyphicon-ok',
                    11: 'glyphicon-remove'};
      var glyph = glyphs[status_id];

      var labels = {1: 'label-primary',
                    2: 'label-primary',
                    3: 'label-info',
                    4: 'label-warning',
                    10: 'label-success',
                    11: 'label-danger'};
      var label = labels[status_id];

      return `<h4>
                <span class="label ${label}">
                  <span class="glyphicon ${glyph}" aria-hidden="true"></span>&nbsp;${status}
                </span>
              </h4>`
    }

    // Set & show the job log element
    function update_job_log(log_text) {
      // Show the log
      var outer = $('#job_log_outer');
      outer.removeClass('hidden');

      // Find the current position of the scrollable element, before we update it
      var inner = $('#job_log_inner')
      var diff = inner.prop('scrollHeight') - (inner.scrollTop() + inner.outerHeight());

      // Update the log
      inner.html(log_text);

      // If the user hasn't scrolled up, scroll to the bottom to show the new log data
      if( diff <= 0 )
        inner.scrollTop(inner.prop('scrollHeight'));
    }

    // Is the job in a "Failed" or "Succeeded" state?
    function job_finished() {
      if( last_status == 10 || last_status == 11 ) {
        return true;
      } else {
        return false;
      }
    }

    function update_job_status(status_id) {
      var status = job_status_to_human(status_id)
      $('#job_status').html(status);

      last_status = status_id;

      // Update the "Waiting" message appropriately
      var waiting = '<h6>Unknown</h6>';
      switch(last_status) {
        case 1:
        case 2:
          waiting = '<h6><i class="fa fa-spinner fa-pulse"></i>&nbsp;Waiting for job to start...</h6>'
          $('#job-waiting').html(waiting);
          $('#job-waiting').removeClass('hidden');
          break;
        case 3:
        case 4:
          waiting = '<h6><i class="fa fa-cog fa-spin"></i>&nbsp;Waiting for job to complete...</h6>';
          $('#job-waiting').html(waiting);
          $('#job-waiting').removeClass('hidden');
          break;
        case 10:
        case 11:
          $('#job-waiting').addClass('hidden');
          break;
      }
    }

    // Set & show the job details
    function update_job_details(job) {
      var strap = `<h1>${job.job_name}&nbsp;<small>v${job.job_version}</small></h1>`;
      $('#job_header').html(strap);

      $('#job_id').text(job.id);

      if (job.started) {
        var started = new Date(job.started);
        $('#job_started').text(started.toUTCString());
      }

      if (job.ended) {
        var ended = new Date(job.ended);
        $('#job_ended').text(ended.toUTCString());
      }

      $('#job_details').removeClass('hidden');
    }

    // Update everything: job details, status & log
    function update_job(job) {
      update_job_details(job);
      update_job_status(job.status);
      update_job_log(job.log);
    }

    function job_get_failed(xhr) {
      var failure_message = `<p>
                               <h2>Failed to retrieve job</h2><br>
                               <strong>${xhr.status}:</strong> ${xhr.responseText}
                             </p>`
      $('#job_failure').html(failure_message);

      $('#job_failure').removeClass('hidden');
    }

    function update_job_status_and_check_completion(status_id) {
      if( status_id != last_status ) {
        update_job_status(status_id);
      }

      // Did the job end?
      if( job_finished() ){
        // Update the job details so that E.g. the "Ended" time is shown
        api_get(url, '{{username}}', update_job_details, job_get_failed);
      }
    }

    function watch_job(url) {
      if( job_finished() ){
        console.log(`last_status is ${last_status}: nothing to do here`);
      } else {
        console.log(`last_status=${last_status}`);

        // Check job status
        var status_url = `${url}/status`;
        api_get(status_url,
                '{{username}}',
                function(data) {
                  update_job_status_and_check_completion(data.status);
                },
                job_get_failed);

        // Update log
        var log_url = `${url}/log`;
        api_get(log_url, '{{username}}', function(data) { update_job_log(data.log); }, job_get_failed);

        // Check again...
        setTimeout(function() { watch_job(url); }, 3000);
      }
    }

    // Retrieve the job data from the API & call either the success or failure handlers
    var last_status = 0;
    var url = '{{job_url}}';

    // Inital get & display the job details, status & log
    api_get(url, '{{username}}', update_job, job_get_failed);

    // Watch the job for status updates
    setTimeout(function() { watch_job(url); }, 3000);
  </script>

</div>
